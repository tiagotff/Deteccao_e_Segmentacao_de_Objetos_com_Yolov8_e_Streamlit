# Arquivos compilados/otimizados/DLL em bytes
__pycache__/
*.py[cod]
*$py.class

# Extensões C
*.so

# Pasta local
local_folder
project_demo
project_demo/
logs/
local_folder/
/demo.py
demo.py
runs/


# Distribuição / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
pip-wheel-metadata/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg

MANIFEST

# PyInstaller
# Geralmente esses arquivos são escritos por um script python a partir de um modelo
# antes do PyInstaller construir o exe, para injetar data/outras informações nele.
*.manifest
*.spec

.vscode

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Relatórios de teste/cobertura de unidade
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/

# Traduções
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx - documentação
docs/_build/

# PyBuilder
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
.python-version

# pipenv
# De acordo com pypa/pipenv#598, é recomendado incluir Pipfile.lock no controle de versão.
# No entanto, em caso de colaboração, se houver dependências ou dependências específicas da plataforma
# não tendo suporte multiplataforma, o pipenv pode instalar dependências que não funcionam ou não
# instale todas as dependências necessárias.
#Pipfile.lock

# PEP 582; used by e.g. github.com/David-OConnor/pyflow
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
venv_/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentação
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/
